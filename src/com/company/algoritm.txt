if char to be read
	if char is operand or (
		push onto operand stack
	else if char is operator
		if operator is higher precedence
			push onto operator stack
		else if char is smaller precedence
			while opertor is smaller
				pop top from operator stack
				pop 2 operand stack
				push result onto operand stack
		else if char is )
			 while opertor is smaller
				pop top from operator stack
				pop 2 operand stack
				push result onto operand stack


Possible Bugs:
1. 3 + ++ 1 or 3+++1 
	if(input[x] == input[x+1])
	Create a value in the class called modifier, it is set to 0 initialy and everytime you hit a ++ you increment it one, every time you hit a -- you decrement it.
	Then every time a operand is pushed to the stack you add the modifer value to it. If you havent hit a ++ or -- it will just add zero. 
	Every time it adds to an operator it should be set to zero.
	So now 3+++1 will add 3 + modifer to the operand stack and reset modifer to 0, see ++ and increment the modifier, see a + and add it the operator stack, add 1 + modifer to the operand stack and reset modifer to 0.
	(NOTE: everytime you have a incrmenter or decrementer you need to move your index up an extra time because it would see ++++2 as 3 incrementers)